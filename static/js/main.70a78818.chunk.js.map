{"version":3,"sources":["types/Sort.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","components/LoadingError/LoadingError.tsx","App.tsx","app/useSortAndSearch.jsx","index.tsx"],"names":["Sort","actions","todo","type","payload","currentTodoReducer","state","action","value","filterReducer","filter","query","sort","all","todos","todosReducer","rootReducer","combineReducers","currentTodo","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","selectedTodo","dispatch","className","map","classnames","id","completed","title","onClick","currentTodoActions","openTodo","TodoFilter","onChange","event","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getTodos","getUser","userId","Loader","TodoModal","useState","user","setUser","a","userFromServer","useEffect","fetchUser","href","email","name","LoadingError","App","isLoading","setIsLoading","hasLoadingError","setHasLoadingError","todosFromServer","todosActions","fetchTodos","sortedAndSearchedTodos","useMemo","active","toLowerCase","includes","useSortAndSearch","Root","ReactDOM","render","document","getElementById"],"mappings":"6KAAYA,E,uDCgBCC,EALG,SAACC,GAAD,MAAgC,CAC9CC,KAAM,kBACNC,QAASF,IAGED,EAPM,iBAAyB,CAAEE,KAAM,uBA0BrCE,EAdY,WAGd,IAFXC,EAEU,uDAFK,KACfC,EACU,uCACV,OAAQA,EAAOJ,MACb,IAAK,kBACH,OAAOI,EAAOH,QAChB,IAAK,qBACH,OAAO,KACT,QACE,OAAOE,I,iBD/BDN,K,UAAAA,E,sBAAAA,E,iBAAAA,M,KESZ,IAcaC,EAdI,SAACO,GAAD,MAAoC,CACnDL,KAAM,kBACNC,QAASI,IAYEP,EATM,iBAAyB,CAC1CE,KAAM,sBAQKF,EALM,SAACO,GAAD,MAAoB,CACrCL,KAAM,oBACNC,QAASI,IAyBIC,EApBO,WAIF,IAJGC,EAIJ,uDAJqB,CACtCC,MAAO,GACPC,KAAMZ,EAAKa,KAEbN,EAAmB,uCACjB,OAAQA,EAAOJ,MACb,IAAK,kBACH,OAAO,2BAAKO,GAAZ,IAAoBC,MAAOJ,EAAOH,UAEpC,IAAK,oBACH,OAAO,2BAAKM,GAAZ,IAAoBC,MAAO,KAE7B,IAAK,oBACH,OAAO,2BAAKD,GAAZ,IAAoBE,KAAML,EAAOH,UAEnC,QACE,OAAOM,I,QC9BAT,EALK,SAACa,GAAD,MAA4B,CAC5CX,KAAM,aACNC,QAASU,IAeIC,EAVM,WAAiD,IAAhDD,EAA+C,uDAA/B,KAAM,EAAMP,EAAmB,uCACnE,MACO,eADCA,EAAOJ,KAEL,GAAN,mBAAWW,GAAX,YAAqBP,EAAOH,UAGrBU,GCXPE,EAAcC,0BAAgB,CAClCC,YAAab,EACbK,OAAQD,EACRK,MAAOC,IAIII,EAAQC,sBACnBJ,EACAK,8BACEC,0BAAgBC,O,qECfPC,EAAoCC,IACpCC,EAAkDC,I,OCMlDC,EAA4B,SAAC,GAEnC,IADLd,EACI,EADJA,MAEMe,EAAeH,GAAe,SAAApB,GAAK,OAAIA,EAAMY,eAC7CY,EAAWN,IAMjB,OACE,wBAAOO,UAAU,+BAAjB,UACE,gCACE,+BACE,mCACA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAGjB,uCACA,wCAIJ,gCACGjB,EAAMkB,KAAI,SAAA9B,GAAI,OACb,qBACE,UAAQ,OAER6B,UAAWE,IACT,CAAE,4BAA6BJ,IAAiB3B,IAJpD,UAOE,oBAAI6B,UAAU,eAAd,SAA8B7B,EAAKgC,KACnC,oBAAIH,UAAU,eAAd,SACG7B,EAAKiC,WACJ,sBAAMJ,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAU,qBAInB,oBAAIA,UAAU,2BAAd,SACE,mBAAGA,UAAWE,IACZ,CACE,mBAAoB/B,EAAKiC,UACzB,mBAAoBjC,EAAKiC,YAH7B,SAOGjC,EAAKkC,UAGV,oBAAIL,UAAU,8BAAd,SACE,wBACE,UAAQ,eACRA,UAAU,SACV5B,KAAK,SACLkC,QAAS,kBApDN,SAACnC,GAChB4B,EAASQ,EAA2BpC,IAmDTqC,CAASrC,IAJ1B,SAMI2B,IAAiB3B,EAEf,sBAAM6B,UAAU,OAAhB,SACE,mBAAGA,UAAU,uBAIf,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,uBAvClB7B,EAAKgC,aClCTM,EAAa,WACxB,IAAMV,EAAWL,cACjB,EAAwBC,GAAe,SAAApB,GAAK,OAAIA,EAAMI,UAA9CC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,KAcf,OACE,uBAAMmB,UAAU,mBAAhB,UACE,mBAAGA,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,yBACEvB,MAAOI,EACP6B,SAlBgB,SAACC,GACzBZ,EAAS7B,EAAmByC,EAAMC,OAAOnC,SAkBjC,UAAQ,eAHV,UAKE,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,YAAd,8BAKN,oBAAGuB,UAAU,qDAAb,UACE,uBACE,UAAQ,cACR5B,KAAK,OACL4B,UAAU,QACVa,YAAY,YACZpC,MAAOG,EACP8B,SA/BkB,SAACC,GACzBZ,EAAS7B,EAAiByC,EAAMC,OAAOnC,WAiCnC,sBAAMuB,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAGdpB,GACC,sBAAMoB,UAAU,gBAAgBc,MAAO,CAAEC,cAAe,OAAxD,SACE,wBACE,UAAQ,oBACR,aAAW,SACX3C,KAAK,SACL4B,UAAU,SACVM,QAzCa,WACvBP,EAAS7B,iBCNb,SAAS8C,EAAOC,GAEd,IARYC,EAQNC,EAVS,iEAUYF,EAAM,QAEjC,OAVYC,EAUA,IATL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OASnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,UAGd,IAAMC,EAAW,kBAAMX,EAAY,WAE7BY,EAAU,SAACC,GAAD,OAAoBb,EAAG,iBAAiBa,KCpBlDC,G,MAAmB,kBAC9B,qBAAK9B,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCEN+B,EAAY,WACvB,MAAwBC,mBAAsB,MAA9C,mBAAOC,EAAP,KAAaC,EAAb,KACMpC,EAAeH,GAAe,SAAApB,GAAK,OAAIA,EAAMY,eAC7CY,EAAWN,IAHY,4CAS7B,4BAAA0C,EAAA,0DACMrC,EADN,gCAEiC8B,EAAQ9B,EAAa+B,QAFtD,OAEUO,EAFV,OAIIF,EAAQE,GAJZ,4CAT6B,sBAqB7B,OAJAC,qBAAU,YAjBmB,mCAkB3BC,KACC,IAGD,sBAAKtC,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBAEbiC,EAGA,sBAAKjC,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,sBACEA,UAAU,0CACV,UAAQ,eAFV,0BAKGF,QALH,IAKGA,OALH,EAKGA,EAAcK,MAGjB,wBACE/B,KAAK,SACL4B,UAAU,SACV,UAAQ,cACR,aAAW,SACXM,QAtCM,WAChBP,EAASQ,WAyCH,sBAAKP,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,gBACGF,QADH,IACGA,OADH,EACGA,EAAcO,QAGjB,oBAAGL,UAAU,QAAQ,UAAQ,aAA7B,UACe,OAAZF,QAAY,IAAZA,KAAcM,UACX,wBAAQJ,UAAU,mBAAlB,kBACA,wBAAQA,UAAU,kBAAlB,qBACH,OACD,mBAAGuC,KAAI,iBAAYN,EAAKO,OAAxB,SACGP,EAAKQ,gBAhCd,cAAC,EAAD,QCjCKC,EAAe,WAC1B,OACE,qBAAK1C,UAAU,kCAAf,iDCYS2C,EAAgB,WAC3B,MAAkCX,oBAAS,GAA3C,mBAAOY,EAAP,KAAkBC,EAAlB,KACA,EAA8Cb,oBAAS,GAAvD,mBAAOc,EAAP,KAAwBC,EAAxB,KAEA,EAAwBpD,GAAe,SAAApB,GAAK,OAAIA,EAAMI,UAA9CC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,KACTE,EAAQY,GAAe,SAAApB,GAAK,OAAIA,EAAMQ,SACtCe,EAAeH,GAAe,SAAApB,GAAK,OAAIA,EAAMY,eAE7CY,EAAWN,IARgB,4CAUjC,4BAAA0C,EAAA,6DACEU,GAAa,GACbE,GAAmB,GAFrB,kBAIkCpB,IAJlC,OAIUqB,EAJV,OAMIjD,EAASkD,EAAuBD,IAChCH,GAAa,GAPjB,kDASIE,GAAmB,GACnBF,GAAa,GAVjB,2DAViC,sBAwBjCR,qBAAU,YAxBuB,mCAyB/Ba,KACC,IAEH,IAAMC,ECvCwB,SAACpE,EAAOF,EAAMD,GAkB5C,OAjBsBwE,mBAAQ,WAC5B,OAASrE,GAAS,IACfJ,QAAO,SAAAR,GACN,OAAQU,GACN,KAAKZ,EAAKoF,OACR,OAAQlF,EAAKiC,UACf,KAAKnC,EAAKmC,UACR,OAAOjC,EAAKiC,UACd,KAAKnC,EAAKa,IACV,QACE,OAAOX,MAGZQ,QAAO,SAAAR,GAAI,OAAIA,EAAKkC,MAAMiD,cAAcC,SAAS3E,EAAM0E,oBAEzD,CAACvE,EAAOF,EAAMD,IDuBc4E,CAC7BzE,EACAF,EACAD,GAGF,OACE,mCACE,qBAAKoB,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,MAGD8C,EACG,cAAC,EAAD,IAEA,qBAAK9C,UAAU,QAAf,SACG4C,EACG,cAAC,EAAD,IAEA,cAAC,EAAD,CAAU7D,MAAOoE,MAK1BrD,GAAgB,cAAC,EAAD,cE9DvB2D,EAAO,kBACX,cAAC,IAAD,CAAUrE,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,SAKNsE,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,W","file":"static/js/main.70a78818.chunk.js","sourcesContent":["export enum Sort {\n  all = 'all',\n  completed = 'completed',\n  active = 'active',\n}\n","import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Filter } from '../types/Filter';\nimport { Sort } from '../types/Sort';\n\ntype QueryAddAction = { type: 'filter/QUERYADD', payload: string };\ntype QueryClearAction = { type: 'filter/QUERYCLEAR' };\ntype SortChangeAction = { type: 'filter/SORTCHANGE', payload: string };\n\ntype Action = QueryAddAction | QueryClearAction | SortChangeAction;\n\nconst queryAdd = (value: string): QueryAddAction => ({\n  type: 'filter/QUERYADD',\n  payload: value,\n});\n\nconst queryClear = (): QueryClearAction => ({\n  type: 'filter/QUERYCLEAR',\n});\n\nconst sortChange = (value: string) => ({\n  type: 'filter/SORTCHANGE',\n  payload: value,\n});\n\nexport const actions = { queryAdd, queryClear, sortChange };\n\nconst filterReducer = (filter: Filter = {\n  query: '',\n  sort: Sort.all,\n},\naction: Action) => {\n  switch (action.type) {\n    case 'filter/QUERYADD':\n      return { ...filter, query: action.payload };\n\n    case 'filter/QUERYCLEAR':\n      return { ...filter, query: '' };\n\n    case 'filter/SORTCHANGE':\n      return { ...filter, sort: action.payload as Sort };\n\n    default:\n      return filter;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype LoadTodos = { type: 'todos/LOAD', payload: Todo[] };\n\ntype Action = LoadTodos;\n\nconst loadTodos = (todos: Todo[]): Action => ({\n  type: 'todos/LOAD',\n  payload: todos,\n});\n\nexport const actions = { loadTodos };\n\nconst todosReducer = (todos: Todo[] = [] || null, action: Action) => {\n  switch (action.type) {\n    case 'todos/LOAD':\n      return [...todos, ...action.payload];\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport classnames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n}) => {\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const openTodo = (todo: Todo) => {\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => (\n          <tr\n            data-cy=\"todo\"\n            key={todo.id}\n            className={classnames(\n              { 'has-background-info-light': selectedTodo === todo },\n            )}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classnames(\n                {\n                  'has-text-danger': !todo.completed,\n                  'has-text-success': todo.completed,\n                },\n              )}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => openTodo(todo)}\n              >\n                {(selectedTodo === todo)\n                  ? (\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye-slash\" />\n                    </span>\n                  )\n                  : (\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye\" />\n                    </span>\n                  )}\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { ChangeEvent } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/filter';\n\nexport const TodoFilter = () => {\n  const dispatch = useDispatch();\n  const { query, sort } = useAppSelector(state => state.filter);\n\n  const handleSortChange = ((event: ChangeEvent<HTMLSelectElement>) => {\n    dispatch(actions.sortChange(event.target.value));\n  });\n\n  const handleQueryChange = (event: ChangeEvent<HTMLInputElement>) => {\n    dispatch(actions.queryAdd(event.target.value));\n  };\n\n  const handleQueryClear = () => {\n    dispatch(actions.queryClear());\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            value={sort}\n            onChange={handleSortChange}\n            data-cy=\"statusSelect\"\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleQueryChange}\n\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              aria-label=\"delete\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleQueryClear}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoModal = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const closeTodo = () => {\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  async function fetchUser() {\n    if (selectedTodo) {\n      const userFromServer = await getUser(selectedTodo.userId);\n\n      setUser(userFromServer);\n    }\n  }\n\n  useEffect(() => {\n    fetchUser();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {selectedTodo?.id}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              aria-label=\"delete\"\n              onClick={closeTodo}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo?.completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n              {' by '}\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","export const LoadingError = () => {\n  return (\n    <div className=\"notification is-danger is-light\">\n      An error occured when loading data\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { getTodos } from './api';\nimport { Loader } from './components/Loader';\nimport { TodoModal } from './components/TodoModal';\nimport { useSortAndSearch } from './app/useSortAndSearch';\nimport { LoadingError } from './components/LoadingError';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasLoadingError, setHasLoadingError] = useState(false);\n\n  const { query, sort } = useAppSelector(state => state.filter);\n  const todos = useAppSelector(state => state.todos);\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n\n  const dispatch = useAppDispatch();\n\n  async function fetchTodos() {\n    setIsLoading(true);\n    setHasLoadingError(false);\n    try {\n      const todosFromServer = await getTodos();\n\n      dispatch(todosActions.loadTodos(todosFromServer));\n      setIsLoading(false);\n    } catch (error) {\n      setHasLoadingError(true);\n      setIsLoading(false);\n    }\n  }\n\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n\n  const sortedAndSearchedTodos = useSortAndSearch(\n    todos,\n    sort,\n    query,\n  );\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            {hasLoadingError\n              ? <LoadingError />\n              : (\n                <div className=\"block\">\n                  {isLoading\n                    ? <Loader />\n                    : (\n                      <TodoList todos={sortedAndSearchedTodos} />\n                    )}\n                </div>\n              )}\n\n            {selectedTodo && <TodoModal />}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { useMemo } from 'react';\nimport { Sort } from '../types/Sort';\n\nexport const useSortAndSearch = (todos, sort, query) => {\n  const modifiedTodos = useMemo(() => {\n    return ((todos || [])\n      .filter(todo => {\n        switch (sort) {\n          case Sort.active:\n            return !todo.completed;\n          case Sort.completed:\n            return todo.completed;\n          case Sort.all:\n          default:\n            return todo;\n        }\n      })\n      .filter(todo => todo.title.toLowerCase().includes(query.toLowerCase()))\n    );\n  }, [todos, sort, query]);\n\n  return modifiedTodos;\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}